openapi: 3.1.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing user registration, login, and updates.
servers:
  - url: https://localhost:80
paths:
  user/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Login is already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
  user/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2PasswordRequestForm'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Incorrect username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
  user/update:
    put:
      summary: Update user data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
      responses:
        '200':
          description: User data updated successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
  posts/create:
    post:
      summary: Create a new post
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: integer
  posts/update:
    put:
      summary: Update an existing post
      operationId: updatePost
      parameters:
        - name: post_id
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
  posts/delete:
    delete:
      summary: Delete a post
      operationId: deletePost
      parameters:
        - name: post_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
  posts/:
    get:
      summary: Get a post by ID
      operationId: getPost
      parameters:
        - name: post_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullInfoPost'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
  posts/list:
    get:
      summary: Get all posts
      operationId: getAllPosts
      parameters:
        - name: page_number
          in: query
          required: true
          schema:
            type: integer
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullInfoPost'